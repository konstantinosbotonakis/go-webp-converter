name: Go Release Build

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v0.1.2 etc.

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # Specify your Go version

      - name: Install gox
        run: go install github.com/mitchellh/gox@latest

      - name: Set output directory name
        id: set_paths
        run: echo "output_dir=release_builds" >> $GITHUB_ENV

      - name: Run GoReleaser with Gox (or build manually)
        run: |
          mkdir -p ${{ env.output_dir }}
          gox -osarch="linux/amd64 windows/amd64 darwin/amd64 darwin/arm64" \
              -output="${{ env.output_dir }}/{{.Dir}}-{{.OS}}-{{.Arch}}" \
              ./cmd/imageconverter
        # Note: {{.Dir}} will be 'imageconverter'.
        # We might want to rename them to just 'imageconverter-os-arch'

      - name: Rename artifacts for consistency
        run: |
          cd ${{ env.output_dir }}
          # For Windows, add .exe
          if [ -f "imageconverter-windows-amd64" ]; then
            mv "imageconverter-windows-amd64" "imageconverter-windows-amd64.exe"
          fi
          # Generic renames if needed (e.g. remove the 'imageconverter-' prefix from the binary name itself if gox includes it from the folder)
          # For example, if the output is 'imageconverter-imageconverter-linux-amd64'
          # for f in imageconverter-*; do mv -- "$f" "${f#imageconverter-}"; done
          # The current gox command should produce names like 'imageconverter-linux-amd64'
          ls -R . # List files for debugging

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.output_dir }}/*
          # body_path: CHANGELOG.md # Optional: path to a file with release notes
          # draft: false # Optional: set to true to create a draft release
          # prerelease: false # Optional: set to true to mark as prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions automatically
